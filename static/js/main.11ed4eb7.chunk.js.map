{"version":3,"sources":["service-worker/registerUserSubscription.ts","service-worker/serviceWorkerManager.ts","index.tsx","environment.ts","components/display/loader/useLoaderStyles.ts","components/display/loader/Loader.tsx"],"names":["publicVapidKey","urlBase64ToUint8Array","base64String","base64","repeat","length","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","registerUserSubscription","register","options","a","pushManager","subscribe","userVisibleOnly","applicationServerKey","subscriptionData","fetch","credentials","method","headers","Accept","body","JSON","stringify","Error","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","console","info","state","onActivated","controller","onUpdate","onSuccess","catch","error","URL","process","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","App","React","lazy","assetsServiceWorker","Notification","permission","setTimeout","silent","e","ReactDOM","render","fallback","Loader","environment","document","getElementById","network","Network","create","operation","variables","opts","query","text","json","errors","forEach","message","source","RecordSource","store","Store","Environment","makeStyles","theme","createStyles","wrapper","textAlign","margin","spacing","fontSize","lineHeight","color","classes","useLoaderStyles","className"],"mappings":"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","file":"static/js/main.11ed4eb7.chunk.js","sourcesContent":["const publicVapidKey =\n  'BJthRQ5myDgc7OSXzPCMftGw-n16F7zQBEN7EUD6XxcfTTvrLGWSIG7y_JxiWtVlCFua0S8MTB5rPziBqNx1qIo';\n\nfunction urlBase64ToUint8Array(base64String: string) {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+') // eslint-disable-line no-useless-escape\n    .replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nexport default async function registerUserSubscription(\n  register: ServiceWorkerRegistration,\n  options?: { silent: boolean },\n) {\n  try {\n    const subscriptionData = await register.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: urlBase64ToUint8Array(publicVapidKey),\n    });\n\n    await fetch(`/notifications`, {\n      credentials: 'same-origin',\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        subscriptionData,\n        options,\n      }),\n    });\n  } catch (e) {\n    throw new Error(`cannot register subscription | ${e}`);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ninterface Config {\n  onActivated?: (registration: ServiceWorkerRegistration) => void;\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          console.info(['installingWorker.onstatechange'], installingWorker.state);\n          if (installingWorker.state === 'activated') {\n            // Execute callback\n            if (config && config.onActivated) {\n              config.onActivated(registration);\n            }\n          }\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.info(\n                `New content is available and will be used when all tabs for this page are closed. See http://bit.ly/CRA-PWA.`,\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.info('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.info('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config?: Config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      // eslint-disable-next-line no-undef\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl =\n        // eslint-disable-next-line no-undef\n        process.env.NODE_ENV === 'production'\n          ? `${process.env.PUBLIC_URL}/service-worker.js` // eslint-disable-line no-undef\n          : `${process.env.PUBLIC_URL}/notifications-worker.js`; // eslint-disable-line no-undef\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.info(\n            `This web app is being served cache-first by a service worker. To learn more, visit http://bit.ly/CRA-PWA`,\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\nexport default {\n  register,\n  unregister,\n};\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport Loader from './components/display/loader/Loader';\nimport './index.css';\nimport { RelayEnvironmentProvider } from 'relay-hooks';\nimport environment from './environment';\nimport registerUserSubscription from './service-worker/registerUserSubscription';\nimport assetsServiceWorker from './service-worker/serviceWorkerManager';\n\nconst App = React.lazy(() => import('./components/App'));\n\nassetsServiceWorker.register({\n  onUpdate(registration) {\n    console.info(['assetsServiceWorker.register.onUpdate'], registration);\n  },\n  onActivated(registration) {\n    console.info(['assetsServiceWorker.register.onActivated'], registration);\n  },\n  onSuccess(registration) {\n    console.info(['assetsServiceWorker.register.onSuccess'], registration);\n  },\n});\n\ntry {\n  if (Notification.permission === 'granted') {\n    setTimeout(async () => {\n      const registration = await navigator.serviceWorker.ready;\n      console.info(['navigator.serviceWorker.ready'], registration);\n      await registerUserSubscription(registration, { silent: true });\n    }, 3000);\n  }\n} catch (e) {\n  console.error(`error trying to send user subscription | ${e}`);\n}\n\nReactDOM.render(\n  <Suspense fallback={<Loader />}>\n    <RelayEnvironmentProvider environment={environment}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </RelayEnvironmentProvider>\n  </Suspense>,\n  document.getElementById('root'),\n);\n","import { Environment, FetchFunction, Network, RecordSource, Store } from 'relay-runtime';\n\n// eslint-disable-next-line no-undef\nconst GRAPHQL_API_HOST = process.env.REACT_APP_GRAPHQL_HOST || `/graphql`;\n\nconst fetchQuery: FetchFunction = (operation, variables) => {\n  const opts = {\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Credentials': true,\n    },\n    body: JSON.stringify({\n      query: operation.text,\n      variables,\n    }),\n  };\n  return (\n    // @ts-ignore\n    fetch(GRAPHQL_API_HOST, opts)\n      // @ts-ignore\n      .then(response => response.json())\n      // @ts-ignore\n      .then(json => {\n        if (json && json.errors) {\n          json.errors.forEach((error: Error) => {\n            console.error(error.message);\n          });\n        }\n\n        return json;\n      })\n  );\n};\n\nconst network = Network.create(fetchQuery);\nconst source = new RecordSource();\nconst store = new Store(source);\n\nexport default new Environment({\n  network,\n  store,\n});\n","import { createStyles, Theme } from '@material-ui/core';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nexport default makeStyles((theme: Theme) =>\n  createStyles({\n    wrapper: {\n      textAlign: 'center',\n      margin: theme.spacing(1),\n      fontSize: '100px',\n      lineHeight: 0,\n      color: '#3f51b5',\n    },\n  }),\n);\n","import React, { FC } from 'react';\nimport useLoaderStyles from './useLoaderStyles';\n\nconst Loader: FC = () => {\n  const classes = useLoaderStyles();\n\n  return <div className={classes.wrapper}>...</div>;\n};\n\nexport default Loader;\n"],"sourceRoot":""}